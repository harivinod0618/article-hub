{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hariv\\\\Music\\\\the-better-india-comments\\\\frontend\\\\src\\\\components\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from \"react\";\n// // import \"./AdminDashboard.css\";\n// // import axios from \"axios\";\n// // import { FilePlus, MessageSquareText, LayoutList } from \"lucide-react\";\n\n// // function AdminDashboard() {\n// //   const [selectedOption, setSelectedOption] = useState(\"upload\");\n// //   const [title, setTitle] = useState(\"\");\n// //   const [content, setContent] = useState(\"\");\n// //   const [imageFile, setImageFile] = useState(null);\n// //   const [loading, setLoading] = useState(false);\n// //   const [posts, setPosts] = useState([]);\n\n// //   const handleUpload = async () => {\n// //     if (!title || !content || !imageFile) {\n// //       alert(\"All fields are required.\");\n// //       return;\n// //     }\n\n// //     setLoading(true);\n// //     try {\n// //       const formData = new FormData();\n// //       formData.append(\"title\", title);\n// //       formData.append(\"content\", content);\n// //       formData.append(\"image\", imageFile);\n\n// //       await axios.post(\"http://localhost:5000/api/posts\", formData, {\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\n// //       });\n\n// //       alert(\"✅ Post uploaded successfully!\");\n// //       setTitle(\"\");\n// //       setContent(\"\");\n// //       setImageFile(null);\n// //       fetchPosts(); // Refresh the posts\n// //     } catch (err) {\n// //       console.error(\"Upload failed:\", err);\n// //       alert(\"❌ Failed to upload post\");\n// //     } finally {\n// //       setLoading(false);\n// //     }\n// //   };\n\n// //   const fetchPosts = async () => {\n// //     try {\n// //       const res = await axios.get(\"http://localhost:5000/api/posts\");\n// //       setPosts(res.data);\n// //     } catch (err) {\n// //       console.error(\"Failed to fetch posts:\", err);\n// //     }\n// //   };\n\n// //   useEffect(() => {\n// //     if (selectedOption === \"view\") {\n// //       fetchPosts();\n// //     }\n// //   }, [selectedOption]);\n\n// //   const renderContent = () => {\n// //     switch (selectedOption) {\n// //       case \"upload\":\n// //         return (\n// //           <div className=\"upload-form\">\n// //             <h2>Upload a New Post</h2>\n// //             <input\n// //               type=\"text\"\n// //               placeholder=\"Post Title\"\n// //               className=\"input-field small-width\"\n// //               value={title}\n// //               onChange={(e) => setTitle(e.target.value)}\n// //             />\n// //             <br />\n// //             <textarea\n// //               placeholder=\"Post Content\"\n// //               className=\"input-field small-width\"\n// //               value={content}\n// //               onChange={(e) => setContent(e.target.value)}\n// //             ></textarea>\n// //             <br />\n// //             <input\n// //               type=\"file\"\n// //               accept=\"image/*\"\n// //               className=\"input-field small-width\"\n// //               onChange={(e) => setImageFile(e.target.files[0])}\n// //             />\n// //             <br />\n// //             {imageFile && (\n// //               <div>\n// //                 <p>Selected Image Preview:</p>\n// //                 <img\n// //                   src={URL.createObjectURL(imageFile)}\n// //                   alt=\"preview\"\n// //                   style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n// //                 />\n// //               </div>\n// //             )}\n// //             <br />\n// //             <button\n// //               className=\"submit-btn\"\n// //               onClick={handleUpload}\n// //               disabled={loading || !title || !content || !imageFile}\n// //             >\n// //               {loading ? \"Uploading...\" : \"Submit Post\"}\n// //             </button>\n// //           </div>\n// //         );\n\n// //       case \"view\":\n// //         return (\n// //           <div className=\"view-posts\">\n// //             <h2>My Uploaded Posts</h2>\n// //             {posts.length === 0 ? (\n// //               <p>No posts uploaded yet.</p>\n// //             ) : (\n// //               posts.map((post) => (\n// //                 <div key={post._id} className=\"post-card\">\n// //                   <h3>{post.title}</h3>\n// //                   <p>{post.content}</p>\n// //                   {post.imageUrl && (\n// //                     <img\n// //                       src={`http://localhost:5000${post.imageUrl}`}\n// //                       alt={post.title}\n// //                       style={{ maxWidth: \"300px\" }}\n// //                     />\n// //                   )}\n// //                 </div>\n// //               ))\n// //             )}\n// //           </div>\n// //         );\n\n// //       case \"comments\":\n// //         return <h2>View Comments on Your Posts</h2>;\n\n// //       default:\n// //         return null;\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"admin-dashboard\">\n// //       <aside className=\"sidebar\">\n// //         <h1>Admin Panel</h1>\n// //         <ul>\n// //           <li onClick={() => setSelectedOption(\"upload\")}>\n// //             <FilePlus className=\"icon\" /> Upload Post\n// //           </li>\n// //           <li onClick={() => setSelectedOption(\"view\")}>\n// //             <LayoutList className=\"icon\" /> View My Posts\n// //           </li>\n// //           <li onClick={() => setSelectedOption(\"comments\")}>\n// //             <MessageSquareText className=\"icon\" /> View Comments\n// //           </li>\n// //         </ul>\n// //       </aside>\n// //       <main className=\"content\">{renderContent()}</main>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminDashboard;\n\n// import ViewPosts from './ViewPosts';\n\n// import React, { useState, useEffect } from \"react\";\n// import \"./AdminDashboard.css\";\n// import axios from \"axios\";\n// import {\n//   FilePlus,\n//   MessageSquareText,\n//   LayoutList,\n//   Trash,\n//   Pencil,\n//   X,\n//   Save,\n// } from \"lucide-react\";\n\n// function AdminDashboard() {\n//   const [selectedOption, setSelectedOption] = useState(\"upload\");\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [imageFile, setImageFile] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [posts, setPosts] = useState([]);\n//   const [editingPostId, setEditingPostId] = useState(null);\n//   const [editedTitle, setEditedTitle] = useState(\"\");\n//   const [editedContent, setEditedContent] = useState(\"\");\n\n//   const fetchPosts = async () => {\n//     try {\n//       const res = await axios.get(\"http://localhost:5000/api/posts\");\n//       setPosts(res.data);\n//     } catch (err) {\n//       console.error(\"Failed to fetch posts:\", err);\n//     }\n//   };\n\n//   useEffect(() => {\n//     if (selectedOption === \"view\") {\n//       fetchPosts();\n//     }\n//   }, [selectedOption]);\n\n//   const handleUpload = async () => {\n//     if (!title || !content || !imageFile) {\n//       alert(\"All fields are required.\");\n//       return;\n//     }\n\n//     setLoading(true);\n//     try {\n//       const formData = new FormData();\n//       formData.append(\"title\", title);\n//       formData.append(\"content\", content);\n//       formData.append(\"image\", imageFile);\n\n//       await axios.post(\"http://localhost:5000/api/posts\", formData, {\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\n//       });\n\n//       alert(\"✅ Post uploaded successfully!\");\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setImageFile(null);\n//       fetchPosts();\n//     } catch (err) {\n//       console.error(\"Upload failed:\", err);\n//       alert(\"❌ Failed to upload post\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleDelete = async (postId) => {\n//     if (!window.confirm(\"Are you sure you want to delete this post?\")) return;\n//     try {\n//       await axios.delete(`http://localhost:5000/api/posts/${postId}`);\n//       setPosts(posts.filter((post) => post._id !== postId));\n//     } catch (err) {\n//       console.error(\"Failed to delete post:\", err);\n//       alert(\"❌ Failed to delete post\");\n//     }\n//   };\n\n//   const startEditing = (post) => {\n//     setEditingPostId(post._id);\n//     setEditedTitle(post.title);\n//     setEditedContent(post.content);\n//   };\n\n//   const cancelEditing = () => {\n//     setEditingPostId(null);\n//     setEditedTitle(\"\");\n//     setEditedContent(\"\");\n//   };\n\n//   const saveEdit = async (postId) => {\n//     try {\n//       await axios.put(`http://localhost:5000/api/posts/${postId}`, {\n//         title: editedTitle,\n//         content: editedContent,\n//       });\n//       setEditingPostId(null);\n//       fetchPosts();\n//     } catch (err) {\n//       console.error(\"Failed to update post:\", err);\n//       alert(\"❌ Failed to update post\");\n//     }\n//   };\n\n//   const renderContent = () => {\n//     switch (selectedOption) {\n//       case \"upload\":\n//         return (\n//           <div className=\"upload-form\">\n//             <h2>Upload a New Post</h2>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Post Title\"\n//               className=\"input-field small-width\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//             />\n//             <br />\n//             <textarea\n//               placeholder=\"Post Content\"\n//               className=\"input-field small-width\"\n//               value={content}\n//               onChange={(e) => setContent(e.target.value)}\n//             ></textarea>\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"image/*\"\n//               className=\"input-field small-width\"\n//               onChange={(e) => setImageFile(e.target.files[0])}\n//             />\n//             <br />\n//             {imageFile && (\n//               <div>\n//                 <p>Selected Image Preview:</p>\n//                 <img\n//                   src={URL.createObjectURL(imageFile)}\n//                   alt=\"preview\"\n//                   style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\n//                 />\n//               </div>\n//             )}\n//             <br />\n//             <button\n//               className=\"submit-btn\"\n//               onClick={handleUpload}\n//               disabled={loading}\n//             >\n//               {loading ? \"Uploading...\" : \"Submit Post\"}\n//             </button>\n//           </div>\n//         );\n\n//       case \"view\":\n//         return (\n//           <div className=\"view-posts\">\n//             <h2>My Uploaded Posts</h2>\n//             {posts.length === 0 ? (\n//               <p>No posts uploaded yet.</p>\n//             ) : (\n//               posts.map((post) => (\n//                 <div key={post._id} className=\"post-card\">\n//                   {editingPostId === post._id ? (\n//                     <>\n//                       <input\n//                         type=\"text\"\n//                         value={editedTitle}\n//                         onChange={(e) => setEditedTitle(e.target.value)}\n//                         className=\"input-field\"\n//                       />\n//                       <textarea\n//                         value={editedContent}\n//                         onChange={(e) => setEditedContent(e.target.value)}\n//                         className=\"input-field\"\n//                       ></textarea>\n//                       <div style={{ marginTop: \"10px\" }}>\n//                         <div className=\"button-group\">\n//                           <button className=\"btn save-btn\" onClick={() => saveEdit(post._id)}>\n//                             <Save size={16} /> Save\n//                           </button>\n//                           <button className=\"btn cancel-btn\" onClick={cancelEditing}>\n//                           <X size={16} /> Cancel\n//                           </button>\n//                         </div>\n\n//                       <div className=\"button-group\">\n//   <button className=\"btn edit-btn\" onClick={() => startEditing(post)}>\n//     <Pencil size={16} /> Edit\n//   </button>\n//   <button className=\"btn delete-btn\" onClick={() => handleDelete(post._id)}>\n//     <Trash size={16} /> Delete\n//   </button>\n// </div>\n\n//                       </div>\n//                     </>\n//                   ) : (\n//                     <>\n//                       <h3>{post.title}</h3>\n//                       <p>{post.content}</p>\n//                       {post.imageUrl && (\n//                         <img\n//                           src={`http://localhost:5000${post.imageUrl}`}\n//                           alt={post.title}\n//                           style={{ maxWidth: \"300px\" }}\n//                         />\n//                       )}\n//                       <div style={{ marginTop: \"10px\" }}>\n//                         <button onClick={() => startEditing(post)}>\n//                           <Pencil size={16} /> Edit\n//                         </button>\n//                         <button\n//                           onClick={() => handleDelete(post._id)}\n//                           style={{ marginLeft: 8 }}\n//                         >\n//                           <Trash size={16} /> Delete\n//                         </button>\n//                       </div>\n//                     </>\n//                   )}\n//                 </div>\n//               ))\n//             )}\n//           </div>\n//         );\n\n//       case \"comments\":\n//         return <h2>View Comments on Your Posts</h2>;\n\n//       default:\n//         return null;\n//     }\n//   };\n\n//   return (\n//     <div className=\"admin-dashboard\">\n//       <aside className=\"sidebar\">\n//         <h1>Admin Panel</h1>\n//         <ul>\n//           <li onClick={() => setSelectedOption(\"upload\")}>\n//             <FilePlus className=\"icon\" /> Upload Post\n//           </li>\n//           <li onClick={() => setSelectedOption(\"view\")}>\n//             <LayoutList className=\"icon\" /> View My Posts\n//           </li>\n//           <li onClick={() => setSelectedOption(\"comments\")}>\n//             <MessageSquareText className=\"icon\" /> View Comments\n//           </li>\n//         </ul>\n//       </aside>\n//       <main className=\"content\">{renderContent()}</main>\n//     </div>\n\n// //newww\n\n//   );\n// }\n\n// export default AdminDashboard;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./AdminDashboard.css\";\nimport axios from \"axios\";\nimport { FilePlus, MessageSquareText, LayoutList, Trash, Pencil, X, Save } from \"lucide-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminDashboard() {\n  _s();\n  const [selectedOption, setSelectedOption] = useState(\"upload\");\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [imageFile, setImageFile] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [editingPostId, setEditingPostId] = useState(null);\n  const [editedTitle, setEditedTitle] = useState(\"\");\n  const [editedContent, setEditedContent] = useState(\"\");\n  const fetchPosts = async () => {\n    try {\n      const res = await axios.get(\"http://localhost:5000/api/posts\");\n      setPosts(res.data);\n    } catch (err) {\n      console.error(\"Failed to fetch posts:\", err);\n    }\n  };\n  useEffect(() => {\n    if (selectedOption === \"view\") {\n      fetchPosts();\n    }\n  }, [selectedOption]);\n  const handleUpload = async () => {\n    if (!title || !content || !imageFile) {\n      alert(\"All fields are required.\");\n      return;\n    }\n    setLoading(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"title\", title);\n      formData.append(\"content\", content);\n      formData.append(\"image\", imageFile);\n      await axios.post(\"http://localhost:5000/api/posts\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      alert(\"✅ Post uploaded successfully!\");\n      setTitle(\"\");\n      setContent(\"\");\n      setImageFile(null);\n      fetchPosts();\n    } catch (err) {\n      console.error(\"Upload failed:\", err);\n      alert(\"❌ Failed to upload post\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDelete = async postId => {\n    if (!window.confirm(\"Are you sure you want to delete this post?\")) return;\n    try {\n      await axios.delete(`http://localhost:5000/api/posts/${postId}`);\n      setPosts(posts.filter(post => post._id !== postId));\n    } catch (err) {\n      console.error(\"Failed to delete post:\", err);\n      alert(\"❌ Failed to delete post\");\n    }\n  };\n  const startEditing = post => {\n    setEditingPostId(post._id);\n    setEditedTitle(post.title);\n    setEditedContent(post.content);\n  };\n  const cancelEditing = () => {\n    setEditingPostId(null);\n    setEditedTitle(\"\");\n    setEditedContent(\"\");\n  };\n  const saveEdit = async postId => {\n    try {\n      await axios.put(`http://localhost:5000/api/posts/${postId}`, {\n        title: editedTitle,\n        content: editedContent\n      });\n      setEditingPostId(null);\n      fetchPosts();\n    } catch (err) {\n      console.error(\"Failed to update post:\", err);\n      alert(\"❌ Failed to update post\");\n    }\n  };\n  const renderContent = () => {\n    switch (selectedOption) {\n      case \"upload\":\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Upload a New Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Post Title\",\n            className: \"input-field small-width\",\n            value: title,\n            onChange: e => setTitle(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Post Content\",\n            className: \"input-field small-width\",\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            className: \"input-field small-width\",\n            onChange: e => setImageFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 573,\n            columnNumber: 13\n          }, this), imageFile && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Selected Image Preview:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: URL.createObjectURL(imageFile),\n              alt: \"preview\",\n              style: {\n                maxWidth: \"200px\",\n                marginTop: \"10px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"submit-btn\",\n            onClick: handleUpload,\n            disabled: loading,\n            children: loading ? \"Uploading...\" : \"Submit Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this);\n\n      // case \"view\":\n      //   return (\n      //     <div className=\"view-posts\">\n      //       <h2>My Uploaded Posts</h2>\n      //       {posts.length === 0 ? (\n      //         <p>No posts uploaded yet.</p>\n      //       ) : (\n      //         posts.map((post) => (\n      //           <div key={post._id} className=\"post-card\">\n      //             {editingPostId === post._id ? (\n      //               <>\n      //                 <input\n      //                   type=\"text\"\n      //                   value={editedTitle}\n      //                   onChange={(e) => setEditedTitle(e.target.value)}\n      //                   className=\"input-field\"\n      //                 />\n      //                 <textarea\n      //                   value={editedContent}\n      //                   onChange={(e) => setEditedContent(e.target.value)}\n      //                   className=\"input-field\"\n      //                 ></textarea>\n      //                 <div className=\"button-group\">\n      //                   <button\n      //                     className=\"btn save-btn\"\n      //                     onClick={() => saveEdit(post._id)}\n      //                   >\n      //                     <Save size={16} /> Save\n      //                   </button>\n      //                   <button\n      //                     className=\"btn cancel-btn\"\n      //                     onClick={cancelEditing}\n      //                   >\n      //                     <X size={16} /> Cancel\n      //                   </button>\n      //                 </div>\n      //               </>\n      //             ) : (\n      //               <>\n      //                 <h3>{post.title}</h3>\n      //                 <p>{post.content}</p>\n      //                 {post.imageUrl && (\n      //                   <img\n      //                     src={`http://localhost:5000${post.imageUrl}`}\n      //                     alt={post.title}\n      //                     style={{ maxWidth: \"300px\", marginTop: \"10px\" }}\n      //                   />\n      //                 )}\n      //                 <div className=\"button-group\">\n      //                   <button\n      //                     className=\"btn edit-btn\"\n      //                     onClick={() => startEditing(post)}\n      //                   >\n      //                     <Pencil size={16} /> Edit\n      //                   </button>\n      //                   <button\n      //                     className=\"btn delete-btn\"\n      //                     onClick={() => handleDelete(post._id)}\n      //                   >\n      //                     <Trash size={16} /> Delete\n      //                   </button>\n      //                 </div>\n      //               </>\n      //             )}\n      //           </div>\n      //         ))\n      //       )}\n      //     </div>\n      //   );\n\n      case \"comments\":\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"View Comments on Your Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Admin Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedOption(\"upload\"),\n          children: [/*#__PURE__*/_jsxDEV(FilePlus, {\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this), \" Upload Post\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedOption(\"view\"),\n          children: [/*#__PURE__*/_jsxDEV(LayoutList, {\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 13\n          }, this), \" View My Posts\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedOption(\"comments\"),\n          children: [/*#__PURE__*/_jsxDEV(MessageSquareText, {\n            className: \"icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 13\n          }, this), \" View Comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: renderContent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 689,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 674,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminDashboard, \"nLjGsj5HIGWCIDLbTjI3l/esVTM=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","FilePlus","MessageSquareText","LayoutList","Trash","Pencil","X","Save","jsxDEV","_jsxDEV","AdminDashboard","_s","selectedOption","setSelectedOption","title","setTitle","content","setContent","imageFile","setImageFile","loading","setLoading","posts","setPosts","editingPostId","setEditingPostId","editedTitle","setEditedTitle","editedContent","setEditedContent","fetchPosts","res","get","data","err","console","error","handleUpload","alert","formData","FormData","append","post","headers","handleDelete","postId","window","confirm","delete","filter","_id","startEditing","cancelEditing","saveEdit","put","renderContent","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","accept","files","src","URL","createObjectURL","alt","style","maxWidth","marginTop","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/hariv/Music/the-better-india-comments/frontend/src/components/AdminDashboard.js"],"sourcesContent":["\r\n// // import React, { useState, useEffect } from \"react\";\r\n// // import \"./AdminDashboard.css\";\r\n// // import axios from \"axios\";\r\n// // import { FilePlus, MessageSquareText, LayoutList } from \"lucide-react\";\r\n\r\n// // function AdminDashboard() {\r\n// //   const [selectedOption, setSelectedOption] = useState(\"upload\");\r\n// //   const [title, setTitle] = useState(\"\");\r\n// //   const [content, setContent] = useState(\"\");\r\n// //   const [imageFile, setImageFile] = useState(null);\r\n// //   const [loading, setLoading] = useState(false);\r\n// //   const [posts, setPosts] = useState([]);\r\n\r\n// //   const handleUpload = async () => {\r\n// //     if (!title || !content || !imageFile) {\r\n// //       alert(\"All fields are required.\");\r\n// //       return;\r\n// //     }\r\n\r\n// //     setLoading(true);\r\n// //     try {\r\n// //       const formData = new FormData();\r\n// //       formData.append(\"title\", title);\r\n// //       formData.append(\"content\", content);\r\n// //       formData.append(\"image\", imageFile);\r\n\r\n// //       await axios.post(\"http://localhost:5000/api/posts\", formData, {\r\n// //         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n// //       });\r\n\r\n// //       alert(\"✅ Post uploaded successfully!\");\r\n// //       setTitle(\"\");\r\n// //       setContent(\"\");\r\n// //       setImageFile(null);\r\n// //       fetchPosts(); // Refresh the posts\r\n// //     } catch (err) {\r\n// //       console.error(\"Upload failed:\", err);\r\n// //       alert(\"❌ Failed to upload post\");\r\n// //     } finally {\r\n// //       setLoading(false);\r\n// //     }\r\n// //   };\r\n\r\n// //   const fetchPosts = async () => {\r\n// //     try {\r\n// //       const res = await axios.get(\"http://localhost:5000/api/posts\");\r\n// //       setPosts(res.data);\r\n// //     } catch (err) {\r\n// //       console.error(\"Failed to fetch posts:\", err);\r\n// //     }\r\n// //   };\r\n\r\n// //   useEffect(() => {\r\n// //     if (selectedOption === \"view\") {\r\n// //       fetchPosts();\r\n// //     }\r\n// //   }, [selectedOption]);\r\n\r\n// //   const renderContent = () => {\r\n// //     switch (selectedOption) {\r\n// //       case \"upload\":\r\n// //         return (\r\n// //           <div className=\"upload-form\">\r\n// //             <h2>Upload a New Post</h2>\r\n// //             <input\r\n// //               type=\"text\"\r\n// //               placeholder=\"Post Title\"\r\n// //               className=\"input-field small-width\"\r\n// //               value={title}\r\n// //               onChange={(e) => setTitle(e.target.value)}\r\n// //             />\r\n// //             <br />\r\n// //             <textarea\r\n// //               placeholder=\"Post Content\"\r\n// //               className=\"input-field small-width\"\r\n// //               value={content}\r\n// //               onChange={(e) => setContent(e.target.value)}\r\n// //             ></textarea>\r\n// //             <br />\r\n// //             <input\r\n// //               type=\"file\"\r\n// //               accept=\"image/*\"\r\n// //               className=\"input-field small-width\"\r\n// //               onChange={(e) => setImageFile(e.target.files[0])}\r\n// //             />\r\n// //             <br />\r\n// //             {imageFile && (\r\n// //               <div>\r\n// //                 <p>Selected Image Preview:</p>\r\n// //                 <img\r\n// //                   src={URL.createObjectURL(imageFile)}\r\n// //                   alt=\"preview\"\r\n// //                   style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\r\n// //                 />\r\n// //               </div>\r\n// //             )}\r\n// //             <br />\r\n// //             <button\r\n// //               className=\"submit-btn\"\r\n// //               onClick={handleUpload}\r\n// //               disabled={loading || !title || !content || !imageFile}\r\n// //             >\r\n// //               {loading ? \"Uploading...\" : \"Submit Post\"}\r\n// //             </button>\r\n// //           </div>\r\n// //         );\r\n\r\n// //       case \"view\":\r\n// //         return (\r\n// //           <div className=\"view-posts\">\r\n// //             <h2>My Uploaded Posts</h2>\r\n// //             {posts.length === 0 ? (\r\n// //               <p>No posts uploaded yet.</p>\r\n// //             ) : (\r\n// //               posts.map((post) => (\r\n// //                 <div key={post._id} className=\"post-card\">\r\n// //                   <h3>{post.title}</h3>\r\n// //                   <p>{post.content}</p>\r\n// //                   {post.imageUrl && (\r\n// //                     <img\r\n// //                       src={`http://localhost:5000${post.imageUrl}`}\r\n// //                       alt={post.title}\r\n// //                       style={{ maxWidth: \"300px\" }}\r\n// //                     />\r\n// //                   )}\r\n// //                 </div>\r\n// //               ))\r\n// //             )}\r\n// //           </div>\r\n// //         );\r\n\r\n// //       case \"comments\":\r\n// //         return <h2>View Comments on Your Posts</h2>;\r\n\r\n// //       default:\r\n// //         return null;\r\n// //     }\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div className=\"admin-dashboard\">\r\n// //       <aside className=\"sidebar\">\r\n// //         <h1>Admin Panel</h1>\r\n// //         <ul>\r\n// //           <li onClick={() => setSelectedOption(\"upload\")}>\r\n// //             <FilePlus className=\"icon\" /> Upload Post\r\n// //           </li>\r\n// //           <li onClick={() => setSelectedOption(\"view\")}>\r\n// //             <LayoutList className=\"icon\" /> View My Posts\r\n// //           </li>\r\n// //           <li onClick={() => setSelectedOption(\"comments\")}>\r\n// //             <MessageSquareText className=\"icon\" /> View Comments\r\n// //           </li>\r\n// //         </ul>\r\n// //       </aside>\r\n// //       <main className=\"content\">{renderContent()}</main>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminDashboard;\r\n\r\n// import ViewPosts from './ViewPosts';\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./AdminDashboard.css\";\r\n// import axios from \"axios\";\r\n// import {\r\n//   FilePlus,\r\n//   MessageSquareText,\r\n//   LayoutList,\r\n//   Trash,\r\n//   Pencil,\r\n//   X,\r\n//   Save,\r\n// } from \"lucide-react\";\r\n\r\n// function AdminDashboard() {\r\n//   const [selectedOption, setSelectedOption] = useState(\"upload\");\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [content, setContent] = useState(\"\");\r\n//   const [imageFile, setImageFile] = useState(null);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [posts, setPosts] = useState([]);\r\n//   const [editingPostId, setEditingPostId] = useState(null);\r\n//   const [editedTitle, setEditedTitle] = useState(\"\");\r\n//   const [editedContent, setEditedContent] = useState(\"\");\r\n\r\n//   const fetchPosts = async () => {\r\n//     try {\r\n//       const res = await axios.get(\"http://localhost:5000/api/posts\");\r\n//       setPosts(res.data);\r\n//     } catch (err) {\r\n//       console.error(\"Failed to fetch posts:\", err);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (selectedOption === \"view\") {\r\n//       fetchPosts();\r\n//     }\r\n//   }, [selectedOption]);\r\n\r\n//   const handleUpload = async () => {\r\n//     if (!title || !content || !imageFile) {\r\n//       alert(\"All fields are required.\");\r\n//       return;\r\n//     }\r\n\r\n//     setLoading(true);\r\n//     try {\r\n//       const formData = new FormData();\r\n//       formData.append(\"title\", title);\r\n//       formData.append(\"content\", content);\r\n//       formData.append(\"image\", imageFile);\r\n\r\n//       await axios.post(\"http://localhost:5000/api/posts\", formData, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       });\r\n\r\n//       alert(\"✅ Post uploaded successfully!\");\r\n//       setTitle(\"\");\r\n//       setContent(\"\");\r\n//       setImageFile(null);\r\n//       fetchPosts();\r\n//     } catch (err) {\r\n//       console.error(\"Upload failed:\", err);\r\n//       alert(\"❌ Failed to upload post\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (postId) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this post?\")) return;\r\n//     try {\r\n//       await axios.delete(`http://localhost:5000/api/posts/${postId}`);\r\n//       setPosts(posts.filter((post) => post._id !== postId));\r\n//     } catch (err) {\r\n//       console.error(\"Failed to delete post:\", err);\r\n//       alert(\"❌ Failed to delete post\");\r\n//     }\r\n//   };\r\n\r\n//   const startEditing = (post) => {\r\n//     setEditingPostId(post._id);\r\n//     setEditedTitle(post.title);\r\n//     setEditedContent(post.content);\r\n//   };\r\n\r\n//   const cancelEditing = () => {\r\n//     setEditingPostId(null);\r\n//     setEditedTitle(\"\");\r\n//     setEditedContent(\"\");\r\n//   };\r\n\r\n//   const saveEdit = async (postId) => {\r\n//     try {\r\n//       await axios.put(`http://localhost:5000/api/posts/${postId}`, {\r\n//         title: editedTitle,\r\n//         content: editedContent,\r\n//       });\r\n//       setEditingPostId(null);\r\n//       fetchPosts();\r\n//     } catch (err) {\r\n//       console.error(\"Failed to update post:\", err);\r\n//       alert(\"❌ Failed to update post\");\r\n//     }\r\n//   };\r\n\r\n//   const renderContent = () => {\r\n//     switch (selectedOption) {\r\n//       case \"upload\":\r\n//         return (\r\n//           <div className=\"upload-form\">\r\n//             <h2>Upload a New Post</h2>\r\n//             <input\r\n//               type=\"text\"\r\n//               placeholder=\"Post Title\"\r\n//               className=\"input-field small-width\"\r\n//               value={title}\r\n//               onChange={(e) => setTitle(e.target.value)}\r\n//             />\r\n//             <br />\r\n//             <textarea\r\n//               placeholder=\"Post Content\"\r\n//               className=\"input-field small-width\"\r\n//               value={content}\r\n//               onChange={(e) => setContent(e.target.value)}\r\n//             ></textarea>\r\n//             <br />\r\n//             <input\r\n//               type=\"file\"\r\n//               accept=\"image/*\"\r\n//               className=\"input-field small-width\"\r\n//               onChange={(e) => setImageFile(e.target.files[0])}\r\n//             />\r\n//             <br />\r\n//             {imageFile && (\r\n//               <div>\r\n//                 <p>Selected Image Preview:</p>\r\n//                 <img\r\n//                   src={URL.createObjectURL(imageFile)}\r\n//                   alt=\"preview\"\r\n//                   style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\r\n//                 />\r\n//               </div>\r\n//             )}\r\n//             <br />\r\n//             <button\r\n//               className=\"submit-btn\"\r\n//               onClick={handleUpload}\r\n//               disabled={loading}\r\n//             >\r\n//               {loading ? \"Uploading...\" : \"Submit Post\"}\r\n//             </button>\r\n//           </div>\r\n//         );\r\n\r\n//       case \"view\":\r\n//         return (\r\n//           <div className=\"view-posts\">\r\n//             <h2>My Uploaded Posts</h2>\r\n//             {posts.length === 0 ? (\r\n//               <p>No posts uploaded yet.</p>\r\n//             ) : (\r\n//               posts.map((post) => (\r\n//                 <div key={post._id} className=\"post-card\">\r\n//                   {editingPostId === post._id ? (\r\n//                     <>\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         value={editedTitle}\r\n//                         onChange={(e) => setEditedTitle(e.target.value)}\r\n//                         className=\"input-field\"\r\n//                       />\r\n//                       <textarea\r\n//                         value={editedContent}\r\n//                         onChange={(e) => setEditedContent(e.target.value)}\r\n//                         className=\"input-field\"\r\n//                       ></textarea>\r\n//                       <div style={{ marginTop: \"10px\" }}>\r\n//                         <div className=\"button-group\">\r\n//                           <button className=\"btn save-btn\" onClick={() => saveEdit(post._id)}>\r\n//                             <Save size={16} /> Save\r\n//                           </button>\r\n//                           <button className=\"btn cancel-btn\" onClick={cancelEditing}>\r\n//                           <X size={16} /> Cancel\r\n//                           </button>\r\n//                         </div>\r\n\r\n//                       <div className=\"button-group\">\r\n//   <button className=\"btn edit-btn\" onClick={() => startEditing(post)}>\r\n//     <Pencil size={16} /> Edit\r\n//   </button>\r\n//   <button className=\"btn delete-btn\" onClick={() => handleDelete(post._id)}>\r\n//     <Trash size={16} /> Delete\r\n//   </button>\r\n// </div>\r\n\r\n\r\n\r\n//                       </div>\r\n//                     </>\r\n//                   ) : (\r\n//                     <>\r\n//                       <h3>{post.title}</h3>\r\n//                       <p>{post.content}</p>\r\n//                       {post.imageUrl && (\r\n//                         <img\r\n//                           src={`http://localhost:5000${post.imageUrl}`}\r\n//                           alt={post.title}\r\n//                           style={{ maxWidth: \"300px\" }}\r\n//                         />\r\n//                       )}\r\n//                       <div style={{ marginTop: \"10px\" }}>\r\n//                         <button onClick={() => startEditing(post)}>\r\n//                           <Pencil size={16} /> Edit\r\n//                         </button>\r\n//                         <button\r\n//                           onClick={() => handleDelete(post._id)}\r\n//                           style={{ marginLeft: 8 }}\r\n//                         >\r\n//                           <Trash size={16} /> Delete\r\n//                         </button>\r\n//                       </div>\r\n//                     </>\r\n//                   )}\r\n//                 </div>\r\n//               ))\r\n//             )}\r\n//           </div>\r\n//         );\r\n\r\n//       case \"comments\":\r\n//         return <h2>View Comments on Your Posts</h2>;\r\n\r\n//       default:\r\n//         return null;\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"admin-dashboard\">\r\n//       <aside className=\"sidebar\">\r\n//         <h1>Admin Panel</h1>\r\n//         <ul>\r\n//           <li onClick={() => setSelectedOption(\"upload\")}>\r\n//             <FilePlus className=\"icon\" /> Upload Post\r\n//           </li>\r\n//           <li onClick={() => setSelectedOption(\"view\")}>\r\n//             <LayoutList className=\"icon\" /> View My Posts\r\n//           </li>\r\n//           <li onClick={() => setSelectedOption(\"comments\")}>\r\n//             <MessageSquareText className=\"icon\" /> View Comments\r\n//           </li>\r\n//         </ul>\r\n//       </aside>\r\n//       <main className=\"content\">{renderContent()}</main>\r\n//     </div>\r\n\r\n\r\n// //newww\r\n\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n// export default AdminDashboard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./AdminDashboard.css\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FilePlus,\r\n  MessageSquareText,\r\n  LayoutList,\r\n  Trash,\r\n  Pencil,\r\n  X,\r\n  Save,\r\n} from \"lucide-react\";\r\n\r\nfunction AdminDashboard() {\r\n  const [selectedOption, setSelectedOption] = useState(\"upload\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n  const [imageFile, setImageFile] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [editingPostId, setEditingPostId] = useState(null);\r\n  const [editedTitle, setEditedTitle] = useState(\"\");\r\n  const [editedContent, setEditedContent] = useState(\"\");\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const res = await axios.get(\"http://localhost:5000/api/posts\");\r\n      setPosts(res.data);\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch posts:\", err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedOption === \"view\") {\r\n      fetchPosts();\r\n    }\r\n  }, [selectedOption]);\r\n\r\n  const handleUpload = async () => {\r\n    if (!title || !content || !imageFile) {\r\n      alert(\"All fields are required.\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"title\", title);\r\n      formData.append(\"content\", content);\r\n      formData.append(\"image\", imageFile);\r\n\r\n      await axios.post(\"http://localhost:5000/api/posts\", formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      });\r\n\r\n      alert(\"✅ Post uploaded successfully!\");\r\n      setTitle(\"\");\r\n      setContent(\"\");\r\n      setImageFile(null);\r\n      fetchPosts();\r\n    } catch (err) {\r\n      console.error(\"Upload failed:\", err);\r\n      alert(\"❌ Failed to upload post\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (postId) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this post?\")) return;\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/posts/${postId}`);\r\n      setPosts(posts.filter((post) => post._id !== postId));\r\n    } catch (err) {\r\n      console.error(\"Failed to delete post:\", err);\r\n      alert(\"❌ Failed to delete post\");\r\n    }\r\n  };\r\n\r\n  const startEditing = (post) => {\r\n    setEditingPostId(post._id);\r\n    setEditedTitle(post.title);\r\n    setEditedContent(post.content);\r\n  };\r\n\r\n  const cancelEditing = () => {\r\n    setEditingPostId(null);\r\n    setEditedTitle(\"\");\r\n    setEditedContent(\"\");\r\n  };\r\n\r\n  const saveEdit = async (postId) => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/api/posts/${postId}`, {\r\n        title: editedTitle,\r\n        content: editedContent,\r\n      });\r\n      setEditingPostId(null);\r\n      fetchPosts();\r\n    } catch (err) {\r\n      console.error(\"Failed to update post:\", err);\r\n      alert(\"❌ Failed to update post\");\r\n    }\r\n  };\r\n\r\n  const renderContent = () => {\r\n    switch (selectedOption) {\r\n      case \"upload\":\r\n        return (\r\n          <div className=\"upload-form\">\r\n            <h2>Upload a New Post</h2>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Post Title\"\r\n              className=\"input-field small-width\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n            />\r\n            <br />\r\n            <textarea\r\n              placeholder=\"Post Content\"\r\n              className=\"input-field small-width\"\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            ></textarea>\r\n            <br />\r\n            <input\r\n              type=\"file\"\r\n              accept=\"image/*\"\r\n              className=\"input-field small-width\"\r\n              onChange={(e) => setImageFile(e.target.files[0])}\r\n            />\r\n            <br />\r\n            {imageFile && (\r\n              <div>\r\n                <p>Selected Image Preview:</p>\r\n                <img\r\n                  src={URL.createObjectURL(imageFile)}\r\n                  alt=\"preview\"\r\n                  style={{ maxWidth: \"200px\", marginTop: \"10px\" }}\r\n                />\r\n              </div>\r\n            )}\r\n            <br />\r\n            <button\r\n              className=\"submit-btn\"\r\n              onClick={handleUpload}\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Uploading...\" : \"Submit Post\"}\r\n            </button>\r\n          </div>\r\n        );\r\n\r\n      // case \"view\":\r\n      //   return (\r\n      //     <div className=\"view-posts\">\r\n      //       <h2>My Uploaded Posts</h2>\r\n      //       {posts.length === 0 ? (\r\n      //         <p>No posts uploaded yet.</p>\r\n      //       ) : (\r\n      //         posts.map((post) => (\r\n      //           <div key={post._id} className=\"post-card\">\r\n      //             {editingPostId === post._id ? (\r\n      //               <>\r\n      //                 <input\r\n      //                   type=\"text\"\r\n      //                   value={editedTitle}\r\n      //                   onChange={(e) => setEditedTitle(e.target.value)}\r\n      //                   className=\"input-field\"\r\n      //                 />\r\n      //                 <textarea\r\n      //                   value={editedContent}\r\n      //                   onChange={(e) => setEditedContent(e.target.value)}\r\n      //                   className=\"input-field\"\r\n      //                 ></textarea>\r\n      //                 <div className=\"button-group\">\r\n      //                   <button\r\n      //                     className=\"btn save-btn\"\r\n      //                     onClick={() => saveEdit(post._id)}\r\n      //                   >\r\n      //                     <Save size={16} /> Save\r\n      //                   </button>\r\n      //                   <button\r\n      //                     className=\"btn cancel-btn\"\r\n      //                     onClick={cancelEditing}\r\n      //                   >\r\n      //                     <X size={16} /> Cancel\r\n      //                   </button>\r\n      //                 </div>\r\n      //               </>\r\n      //             ) : (\r\n      //               <>\r\n      //                 <h3>{post.title}</h3>\r\n      //                 <p>{post.content}</p>\r\n      //                 {post.imageUrl && (\r\n      //                   <img\r\n      //                     src={`http://localhost:5000${post.imageUrl}`}\r\n      //                     alt={post.title}\r\n      //                     style={{ maxWidth: \"300px\", marginTop: \"10px\" }}\r\n      //                   />\r\n      //                 )}\r\n      //                 <div className=\"button-group\">\r\n      //                   <button\r\n      //                     className=\"btn edit-btn\"\r\n      //                     onClick={() => startEditing(post)}\r\n      //                   >\r\n      //                     <Pencil size={16} /> Edit\r\n      //                   </button>\r\n      //                   <button\r\n      //                     className=\"btn delete-btn\"\r\n      //                     onClick={() => handleDelete(post._id)}\r\n      //                   >\r\n      //                     <Trash size={16} /> Delete\r\n      //                   </button>\r\n      //                 </div>\r\n      //               </>\r\n      //             )}\r\n      //           </div>\r\n      //         ))\r\n      //       )}\r\n      //     </div>\r\n      //   );\r\n\r\n      case \"comments\":\r\n        return <h2>View Comments on Your Posts</h2>;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-dashboard\">\r\n      <aside className=\"sidebar\">\r\n        <h1>Admin Panel</h1>\r\n        <ul>\r\n          <li onClick={() => setSelectedOption(\"upload\")}>\r\n            <FilePlus className=\"icon\" /> Upload Post\r\n          </li>\r\n          <li onClick={() => setSelectedOption(\"view\")}>\r\n            <LayoutList className=\"icon\" /> View My Posts\r\n          </li>\r\n          <li onClick={() => setSelectedOption(\"comments\")}>\r\n            <MessageSquareText className=\"icon\" /> View Comments\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n      <main className=\"content\">{renderContent()}</main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}